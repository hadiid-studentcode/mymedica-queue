generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String
  emailVerified Boolean   @default(false)
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email])
  @@index([tenantId])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Tenant {
  id   String @id @default(cuid())
  name String

  users   User[]
  stages  QueueStage[]
  entries QueueEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QueueStage {
  id    String @id @default(cuid())
  name  String // nama tahapan, contoh : "Poli Umum","Poli Gigi", dll
  order Int // urutan tahapan

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  entries QueueEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model QueueEntry {
  id          String @id @default(cuid())
  patientName String
  queueNumber String // nomor antrian (bisa digenerate contoh : A-001, A-002, dll)
  status      Status @default(WAITING)

  tenantId       String
  tenant         Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  currentStageId String
  currentStage   QueueStage @relation(fields: [currentStageId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([currentStageId])
}

enum Status {
  WAITING     // Menunggu di tahapan ini
  IN_PROGRESS // Sedang dilayani di tahapan ini
  COMPLETED   // Selesai (bisa untuk riwayat)
  CANCELLED   // Dibatalkan
}
